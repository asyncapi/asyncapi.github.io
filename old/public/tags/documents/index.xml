<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documents on AsyncAPI Initiative</title>
    <link>https://www.asyncapi.com/tags/documents/</link>
    <description>Recent content in Documents on AsyncAPI Initiative</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Mar 2019 13:56:52 +0100</lastBuildDate>
    
	<atom:link href="https://www.asyncapi.com/tags/documents/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Organizing your AsyncAPI documents</title>
      <link>https://www.asyncapi.com/blog/organizing-asyncapi-documents/</link>
      <pubDate>Fri, 01 Mar 2019 13:56:52 +0100</pubDate>
      
      <guid>https://www.asyncapi.com/blog/organizing-asyncapi-documents/</guid>
      <description>A recurring question that I get very often is: “how do I organize my AsyncAPI documents?”. Also, the related one: “I have two services, a publisher and a consumer, should I define both in the same AsyncAPI document?”.
Let’s break down some best practices and tips to avoid ending up in a hell of unmanageable documents.
Organizing Microservices  I’m using the term microservices here because it’s the most common type of distributed architecture that you can find nowadays.</description>
    </item>
    
  </channel>
</rss>