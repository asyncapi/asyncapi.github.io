<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting started on AsyncAPI Initiative</title>
    <link>https://www.asyncapi.com/docs/getting-started/</link>
    <description>Recent content in Getting started on AsyncAPI Initiative</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Feb 2019 13:56:52 +0100</lastBuildDate>
    
	<atom:link href="https://www.asyncapi.com/docs/getting-started/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Event-driven architectures</title>
      <link>https://www.asyncapi.com/docs/getting-started/event-driven-architectures/</link>
      <pubDate>Mon, 01 Apr 2019 10:56:52 +0100</pubDate>
      
      <guid>https://www.asyncapi.com/docs/getting-started/event-driven-architectures/</guid>
      <description>All developers, architects, and product managers are used to REST APIs and the synchronous paradigm of communication. You make a request and wait for the response. This is exactly how the web works. You enter a URL (e.g., google.com) in the address bar of your favorite browser and it sends a request to the server. Following, the server sends the response with the content of the website. The web is the greatest implementation of a REST API.</description>
    </item>
    
    <item>
      <title>Coming from OpenAPI</title>
      <link>https://www.asyncapi.com/docs/getting-started/coming-from-openapi/</link>
      <pubDate>Mon, 01 Apr 2019 10:56:52 +0100</pubDate>
      
      <guid>https://www.asyncapi.com/docs/getting-started/coming-from-openapi/</guid>
      <description>If you&amp;rsquo;re coming from OpenAPI, you must know that AsyncAPI started as an adaptation of the OpenAPI specification. We wanted to have as much compatibility as possible between the two so users could reuse parts in both.
You&amp;rsquo;ll find lots of similarities between OpenAPI and AsyncAPI. Just bear in mind that, in the world of event-driven architectures, you have more than one protocol and therefore some things are different. Check out the following comparison chart, inspired by Darrel Miller&amp;rsquo;s blog post:</description>
    </item>
    
    <item>
      <title>AsyncAPI documents</title>
      <link>https://www.asyncapi.com/docs/getting-started/asyncapi-documents/</link>
      <pubDate>Mon, 01 Apr 2019 10:56:52 +0100</pubDate>
      
      <guid>https://www.asyncapi.com/docs/getting-started/asyncapi-documents/</guid>
      <description>An AsyncAPI document is a file that defines and annotates the different components of a specific Event-Driven API.
The format of the file must be JSON or YAML, however, only the subset of YAML that matches the JSON capabilities is allowed.
asyncapi: &amp;#39;2.0.0&amp;#39; id: &amp;#39;urn:com.my-application.example&amp;#39; info: title: Example version: 0.1.0 channels: user/signedup: subscribe: message: description: An event describing that a user just signed up. payload: type: object additionalProperties: false properties: fullName: type: string email: type: string format: email age: type: integer minimum: 18 The AsyncAPI document is a machine-readable definition of your event-driven API.</description>
    </item>
    
    <item>
      <title>Hello world</title>
      <link>https://www.asyncapi.com/docs/getting-started/hello-world/</link>
      <pubDate>Mon, 01 Apr 2019 10:56:52 +0100</pubDate>
      
      <guid>https://www.asyncapi.com/docs/getting-started/hello-world/</guid>
      <description>Let&amp;rsquo;s define an application that&amp;rsquo;s capable of receiving a &amp;ldquo;hello {name}&amp;rdquo; message.
asyncapi: 2.0.0 info: title: Hello world application version: &#39;0.1.0&#39; channels: hello: publish: message: payload: type: string pattern: &#39;^hello .+$&#39;  Let&amp;rsquo;s get into the details of the sample specification:
asyncapi: 2.0.0 info: title: Hello world application version: &amp;#39;0.1.0&amp;#39; channels: hello: publish: message: payload: type: string pattern: &amp;#39;^hello .&amp;#43;$&amp;#39; The first line of the specification starts with the document type, asyncapi, and the version (2.</description>
    </item>
    
    <item>
      <title>Servers</title>
      <link>https://www.asyncapi.com/docs/getting-started/servers/</link>
      <pubDate>Wed, 03 Apr 2019 10:56:52 +0100</pubDate>
      
      <guid>https://www.asyncapi.com/docs/getting-started/servers/</guid>
      <description>In the previous lesson, you learned how to create the definition of a simple Hello World application, so let&amp;rsquo;s take it from there.
In this article, you learn how to add servers to your AsyncAPI document. Adding and defining servers is useful because it specifies where and how to connect. The connection facilitates where to send and receive messages.
asyncapi: 2.0.0 info: title: Hello world application version: &amp;#39;0.1.0&amp;#39; servers: production: url: broker.</description>
    </item>
    
    <item>
      <title>Adding security</title>
      <link>https://www.asyncapi.com/docs/getting-started/security/</link>
      <pubDate>Tue, 16 Apr 2019 10:56:52 +0100</pubDate>
      
      <guid>https://www.asyncapi.com/docs/getting-started/security/</guid>
      <description>In production environments, your API may have to access a message broker that&amp;rsquo;s protected by some auth mechanisms. Examples of these are:
 User &amp;amp; password Certificates API keys OAuth 2  If you&amp;rsquo;re using AsyncAPI to define an API that connects to a message broker, you&amp;rsquo;ll most probably make use of user/password or certificates. Traditionally, message brokers are infrastructure pieces that serve an internal purpose and they&amp;rsquo;re not exposed to the public.</description>
    </item>
    
  </channel>
</rss>